function [Y_ddot, Y_dot, Y, Xf, Af] = neuralNetDeriv(X,net,~)
%SINNEURALNETFCN1 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 24-Apr-2019 16:38:06.
% 
% [Y] = sinNeuralNetFcn1(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
% x1_step1.xoffset = 0;
% x1_step1.gain = 0.2;
% x1_step1.ymin = -1;
x1_step1 = net.inputs{1}.processSettings{1};

% Layer 1
b1 = net.b{1};
IW1_1 = net.IW{1};

% Layer 2
b2 = net.b{2};
LW2_1 = net.LW{2};

% Output 1
% y1_step1.ymin = -1;
% y1_step1.gain = 1.00000011883428;
% y1_step1.xoffset = -0.999999846759021;
y1_step1 = net.outputs{2}.processSettings{1};

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);
Y_dot = cell(1,TS);
Y_ddot = cell(1,TS);

% Gain ratio
    gain_ratio = x1_step1.gain/y1_step1.gain;
% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    
    % Output 2
    Y_dot{1,ts} = gain_ratio*LW2_1*diag(IW1_1)*(1 - a1.*a1);
    
    % Output 3
    dot_a1 = x1_step1.gain * diag(IW1_1) * (1 - a1.*a1);
    Y_ddot{1,ts} = -2*gain_ratio * LW2_1*diag(IW1_1)*(a1 .* dot_a1);
end

Y{1} = Y{1}';
Y_dot{1} = Y_dot{1}';
Y_ddot{1} = Y_ddot{1}';

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
